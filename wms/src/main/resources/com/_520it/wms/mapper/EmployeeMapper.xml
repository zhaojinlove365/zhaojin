<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com._520it.wms.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="com._520it.wms.domain.Employee" >
    <id column="id" property="id" />
    <result column="name" property="name" />
    <result column="password" property="password" />
    <result column="email" property="email" />
    <result column="age" property="age" />
    <result column="admin" property="admin" />
    <association property="dept" javaType="com._520it.wms.domain.Department" >
      <id column="d_id" property="id" />
      <result column="d_name" property="name" />
    </association>
    <collection property="roles" ofType="Role" column="id" select="com._520it.wms.mapper.RoleMapper.selectByEmployeeId"/>
  </resultMap>
  <delete id="deleteByPrimaryKey" >
    delete from employee
    where id = #{id}
  </delete>
  <delete id="deleteRelationWithRole">
    delete from employee_role where employee_id=#{employeeId}

  </delete>

    <delete id="batchDelete">
      delete from employee where id IN
      <foreach collection="ids" open="(" separator="," close=")" item="id">
        #{id}
      </foreach>
    </delete>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id" >
    insert into employee (name, password, email, age, admin, dept_id)
    values (#{name}, #{password}, #{email}, #{age}, #{admin}, #{dept.id})
  </insert>
    <insert id="insertRelationWithRole">
      insert into employee_role (employee_id,role_id)VALUES (#{employeeId},#{roleId})
    </insert>
    <update id="updateByPrimaryKey" >
    update employee
    <set>
      <if test="name!=null">
      name = #{name},
      </if>
      <if test="password!=null">
      password = #{password},
      </if>
      <if test="email!=null">
      email = #{email},
      </if>
      <if test="age!=null">
      age = #{age},
      </if>
      <if test="admin!=null">
      admin = #{admin},
      </if>
      <if test="dept.id!=null">
      dept_id = #{dept.id}
      </if>
    </set>
    where id = #{id}
  </update>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" >
    select id, name, password, email, age, admin, dept_id
    from employee
    where id = #{id}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, name, password, email, age, admin, dept_id
    from employee
  </select>
  <sql id="base_column">
    e.id, e.name, e.password, e.email, e.age, e.admin,
    d.id as d_id,d.name as d_name
  </sql>
  <sql id="base_where">
    <where>
      <if test="keyword!=null">
        (
        e.name like concat('%',#{keyword},'%')
        or
        e.email like concat('%',#{keyword},'%')
        )
      </if>
      <if test="deptId>0">
        and e.dept_id = #{deptId}
      </if>
    </where>
  </sql>
<sql id="base_table">
  employee e
    left JOIN department d on e.dept_id=d.id
</sql>

  <select id="queryForCount" resultType="int">
    SELECT count(e.id)
    FROM <include refid="base_table"/>
    <include refid="base_where"/>
  </select>

  <select id="queryForList" resultMap="BaseResultMap">
    SELECT <include refid="base_column"/>
    from <include refid="base_table"/>
    <include refid="base_where"/>
    limit #{start},#{pageSize}
  </select>
  <select id="selectUserAndPassword" resultType="com._520it.wms.domain.Employee">
    select id, name, password, email, age, admin
    from employee
    where name=#{username} and password=#{password}
  </select>

</mapper>